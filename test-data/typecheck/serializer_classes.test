[CASE multiple_inheritance_from_two_serializers_with_meta_nested_class_defined]
from rest_framework import serializers
class SerializerA(serializers.Serializer):
    class Meta:
        pass
class SerializerB(serializers.Serializer):
    class Meta:
        pass
class SerializerC(SerializerA, SerializerB):
    pass
[/CASE]

[CASE model_serializer_save_returns_bound_model_instance]
from django.db import models
from rest_framework.serializers import ModelSerializer

class Article(models.Model):
    pass
class ArticleSerializer(ModelSerializer):
    class Meta:
        model = Article

serializer = ArticleSerializer(data={})
reveal_type(serializer.instance)  # E: Revealed type is 'Union[main.Article, None]'
serializer.is_valid()
reveal_type(serializer.create({}))  # E: Revealed type is 'main.Article'
reveal_type(serializer.save())  # E: Revealed type is 'main.Article'
[/CASE]

[CASE serializer_model_defined_as_string_name]
from rest_framework.serializers import ModelSerializer
from apps.models import Article

class ArticleSerializer(ModelSerializer):
    class Meta:
        model = 'apps.Article'
serializer = ArticleSerializer(data={})
reveal_type(serializer.create({}))  # E: Revealed type is 'apps.models.Article'

[file apps/__init__.py]
[file apps/models.py]
from django.db import models
class Article(models.Model):
    pass
[/CASE]